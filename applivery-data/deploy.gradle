/*
 * Copyright (c) 2020 Applivery
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

def getBintrayUser() {
    if (System.getenv('BINTRAY_USER')) {
        return System.getenv('BINTRAY_USER')
    }

    if (rootProject.file('local.properties').exists()) {
        Properties properties = new Properties()
        properties.load(rootProject.file('local.properties').newDataInputStream())
        return properties.getProperty('bintray.user')
    }
}

def getBintrayKey() {
    if (System.getenv('BINTRAY_KEY')) {
        return System.getenv('BINTRAY_KEY')
    }

    if (rootProject.file('local.properties').exists()) {
        Properties properties = new Properties()
        properties.load(rootProject.file('local.properties').newDataInputStream())
        return properties.getProperty('bintray.key')
    }
}

apply plugin: 'com.jfrog.bintray'
Properties properties = new Properties()

bintray {
    user = getBintrayUser()
    key = getBintrayKey()
    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        userOrg = 'applivery'
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        publish = true
        publicDownloadNumbers = true

        version {
            name = project.version
            desc = libraryDescription
            released = new Date()
            gpg {
                sign = true
                passphrase = properties.getProperty("bintray.gpg.password")
            }
        }
    }
}

task cleanForDeployment {
    doLast {
        logger.lifecycle('Deployment: Cleaning...')
        logger.lifecycle('Deleting: ' + project.buildDir)
        delete project.buildDir
    }
}

task buildForDeployment {
    shouldRunAfter(cleanForDeployment)
    finalizedBy assemble

    doFirst {
        android.variantFilter { variant ->
            if (variant.buildType.name == 'debug') {
                variant.setIgnore(true)
            }
        }
    }
}

task deploySnapshot {
    shouldRunAfter(buildForDeployment)

    dependsOn cleanForDeployment
    dependsOn buildForDeployment
    finalizedBy bintrayUpload

    doLast {
        version = version + '-Snapshot'
        bintrayUpload.setVersionName(bintrayUpload.getVersionName() + '-Snapshot')
        bintrayUpload.setUserOrg('applivery')
        bintrayUpload.setRepoName('applivery-android-snapshots')
        bintrayUpload.setOverride(true)
        bintrayUpload.setPublish(true)

        logger.lifecycle('Deploying version ' + bintrayUpload.getVersionName() + ' in ' + bintrayUpload.getRepoName())
    }
}

task deployRelease {
    shouldRunAfter(buildForDeployment)

    dependsOn cleanForDeployment
    dependsOn buildForDeployment
    finalizedBy bintrayUpload

    doLast {
        bintrayUpload.setUserOrg('applivery')
        bintrayUpload.setRepoName('maven')

        logger.lifecycle('Deploying version ' + bintrayUpload.getVersionName() + ' in ' + bintrayUpload.getRepoName())
    }
}